TypedBuildCoreComponentsPrompt:
  classes:
  - TypedPrompt
  - Chat
  description: Develop core components of the DSL.
  error_handling: Exception Handling
  methods:
  - execute
  - validate
  parsers:
  - YAML Parser
  - JSON Parser
  performance_metrics:
  - Speed
  - Memory
  source: Develop parsers {{ parsers }} for the YAML configurations. Implement classes
    {{ classes }} and methods {{ methods }} for functionalities. Include {{ error_handling
    }} and consider {{ performance_metrics }}.
  title: Build Core Components
TypedDeploymentPrompt:
  backup_plan: Daily Backups
  ci_cd_pipelines:
  - Jenkins
  - GitLab
  deployment_strategy: Blue-Green
  description: Deploy the system.
  monitoring_tools:
  - Prometheus
  - Grafana
  rollback_procedures:
  - Automated
  - Manual
  source: Choose an appropriate deployment strategy {{ deployment_strategy }}. Implement
    CI/CD pipelines {{ ci_cd_pipelines }}, use monitoring tools {{ monitoring_tools
    }}, have a backup plan {{ backup_plan }}, and prepare rollback procedures {{ rollback_procedures
    }}.
  title: Deployment
TypedDesignArchitecturePrompt:
  components:
  - Parser
  - Executor
  description: Design the DSL architecture.
  interactions:
  - Data Flow
  - Control Flow
  modularity: Modular
  scalability: High
  source: Plan how the DSL will interact with other system components {{ components
    }}. Define the DSL's syntax {{ syntax }}, ensure {{ scalability }} and {{ modularity
    }}, and outline component interactions {{ interactions }}.
  syntax: YAML-based
  title: Design Architecture
TypedDocumentationPrompt:
  api_docs:
  - Endpoints
  - Examples
  description: Create detailed documentation.
  documentation_types:
  - API
  - User Guide
  faqs:
  - General
  - Technical
  source: Create detailed documentation types {{ documentation_types }} and offer
    training sessions or materials to end-users including user guides {{ user_guides
    }}, API documentation {{ api_docs }}, tutorials {{ tutorials }}, and FAQs {{ faqs
    }}.
  title: Documentation
  tutorials:
  - Video
  - Text
  user_guides:
  - Getting Started
  - Advanced
TypedImplementBusinessLogicPrompt:
  algorithms:
  - NLP
  - ML
  data_models:
  - User
  - Environment
  description: Implement the business logic.
  goal_setting: S.M.A.R.T
  optimization_criteria:
  - Efficiency
  - Accuracy
  source: Add logic for team composition {{ team_composition }}, goal setting {{ goal_setting
    }}, use data models {{ data_models }}, apply algorithms {{ algorithms }}, and
    meet optimization criteria {{ optimization_criteria }}.
  team_composition: Cross-functional
  title: Implement Business Logic
TypedMaintenancePrompt:
  description: Maintain and update the system.
  monitoring_metrics:
  - CPU Usage
  - Error Rate
  patching_policy: Security First
  source: Monitor system's usage and performance using metrics {{ monitoring_metrics
    }}. Apply patches and updates as required following the update schedule {{ update_schedule
    }} and patching policy {{ patching_policy }}. Provide support through channels
    {{ support_channels }} and collect feedback via {{ user_feedback_mechanisms }}.
  support_channels:
  - Email
  - Chat
  title: Maintenance
  update_schedule: Monthly
  user_feedback_mechanisms:
  - Survey
  - Reviews
TypedRequirementAnalysisPrompt:
  constraints:
  - Time
  - Budget
  core_functionalities:
  - Parsing
  - Error Handling
  description: Gather detailed requirements for the DSL.
  source: Gather detailed requirements that the DSL needs to fulfill. Identify core
    functionalities, consult with {{ stakeholders }}, consider {{ constraints }},
    choose appropriate {{ technologies }}, within the timeframe of {{ timeframe }}.
  stakeholders:
  - Product Manager
  - Dev Team
  - QA Team
  technologies:
  - Python
  - YAML
  timeframe: Q1
  title: Requirement Analysis
TypedTestingPrompt:
  description: Conduct thorough testing.
  integration_tests:
  - test_end_to_end
  source: Write unit tests {{ unit_tests }}, validate through integration tests {{
    integration_tests }}, perform stress tests {{ stress_tests }}, use test data {{
    test_data }} in various test environments {{ test_environments }}.
  stress_tests:
  - test_load
  test_data:
  - Sample YAML
  - Sample JSON
  test_environments:
  - Local
  - Staging
  title: Testing
  unit_tests:
  - test_parser
  - test_executor
